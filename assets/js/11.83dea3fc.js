(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{187:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_06过滤器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_06过滤器","aria-hidden":"true"}},[t._v("#")]),t._v(" 06过滤器")]),t._v(" "),s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[t._v("相同的数据，但表现形式可以有多种形式，")]),t._v(" "),s("p",[t._v("例如")]),t._v(" "),s("ul",[s("li",[t._v("时间可以分为 "),s("strong",[t._v("时间戳")]),t._v(" 、 "),s("strong",[t._v("格式化")]),t._v("、"),s("strong",[t._v("对象")]),t._v(" 三种形式")]),t._v(" "),s("li",[t._v("字符串可以分为大写、小写、首字母大写等形式")])]),t._v(" "),s("p",[t._v("如果原始数据是时间戳格式，想把其变为 格式化 的，解决方法之一是利用“过滤器”")]),t._v(" "),s("p",[t._v("过滤器本质是"),s("strong",[t._v("函数")]),t._v("，可以对数据信息进行 二次加工处理 操作")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2-888.png",alt:""}})]),t._v(" "),s("p",[t._v("如下时间信息通过 "),s("strong",[t._v("对象")]),t._v(" 或 "),s("strong",[t._v("时间戳")]),t._v(" 显示都不合适，但是变为"),s("strong",[t._v("格式化")]),t._v("时间就比较友好")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Thu Mar 21 2019 17:48:17 GMT+0800     =>   2019-03-21 17:48:17\n\n1553161717825\t     \t\t\t\t\t\t\t\t\t=>  2019-03-21 17:48:17\n\n")])])]),s("p",[t._v("注意：")]),t._v(" "),s("p",[t._v("​\t过滤器只可以用在"),s("strong",[t._v("两个")]),t._v("地方： "),s("font",{attrs:{color:"red"}},[t._v("插值表达式")]),t._v("和 "),s("font",{attrs:{color:"red"}},[t._v(":冒号 属性绑定")]),t._v("。")],1),t._v(" "),s("h2",{attrs:{id:"全局过滤器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局过滤器","aria-hidden":"true"}},[t._v("#")]),t._v(" 全局过滤器")]),t._v(" "),s("p",[t._v("给Vue通过"),s("code",[t._v("filter")]),t._v("方法声明的过滤器是全局的，该Vue的所有实例都可以使用")]),t._v(" "),s("p",[t._v("定义语法：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("Vue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'过滤器的名称'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("origin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// origin 代表被过滤的数据")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对数据进行处理")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后 必须 return 一个处理的结果  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("使用语法：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{ dt | 过滤器的名称 }}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":title")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dt | 过滤器的名称"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n")])])]),s("blockquote",[s("p",[t._v("过滤器与被处理的数据之间通过 竖线| 分隔")])]),t._v(" "),s("p",[t._v("案例：")]),t._v(" "),s("ul",[s("li",[t._v("时间过滤器")]),t._v(" "),s("li",[t._v("多vue实例情形(了解)")])]),t._v(" "),s("h2",{attrs:{id:"私有过滤器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#私有过滤器","aria-hidden":"true"}},[t._v("#")]),t._v(" 私有过滤器")]),t._v(" "),s("p",[t._v("Vue实例化过程中，与el、data平行的位置声明"),s("code",[t._v("filters")]),t._v('成员并在其中制作过滤器，这个过滤器只能被当前Vue渲染的页面使用，称为 "私有过滤器"')]),t._v(" "),s("p",[t._v("定义语法：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" vm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  filters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如下是方法成员，是最新的ES6写法【推荐】")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("过滤器的名称")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("origin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 处理的结果\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n")])])]),s("blockquote",[s("p",[t._v("全局 和 私有 过滤器如果同时存在，并且名称还相同，  则按照 就近原则  调用，即私有的优先")])]),t._v(" "),s("p",[t._v("全局和私有过滤器取舍：")]),t._v(" "),s("p",[t._v("大多数情况下，全局 和 私有过滤器 都可以使用，但是有的时候，我们并不能直面Vue构造函数(例如后期接触的组件)，这时候就只能乖乖使用 私有过滤器 了")]),t._v(" "),s("p",[t._v("案例：")]),t._v(" "),s("ul",[s("li",[t._v("时间过滤器")])]),t._v(" "),s("h2",{attrs:{id:"传递参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传递参数","aria-hidden":"true"}},[t._v("#")]),t._v(" 传递参数")]),t._v(" "),s("p",[t._v("有的时候，过滤器主体功能不变化的情况下，可能结果的形式根据业务要求有所调整，例如同样是时间，有北京时间、巴黎时间等等，地区可以通过给过滤器传递参数实现显示。")]),t._v(" "),s("p",[t._v("过滤器函数  第一个形参是被处理数据，第二、三...形参 接收过滤器传递过来的实参")]),t._v(" "),s("p",[t._v("定义实参：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{ dt | 过滤器的名称(实参，实参...) }}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n")])])]),s("p",[t._v("定义形参：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("Vue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'过滤器的名称'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("origin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("形参，形参"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"小结："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结：","aria-hidden":"true"}},[t._v("#")]),t._v(" 小结：")]),t._v(" "),s("ol",[s("li",[t._v("过滤器分为 "),s("strong",[t._v("全局")]),t._v("和"),s("strong",[t._v("私有")]),t._v(" 的两种类型，关键字有filter 和 filters")]),t._v(" "),s("li",[t._v("过滤器根据业务需要可以传递"),s("strong",[t._v("参数")])]),t._v(" "),s("li",[t._v("只有 "),s("strong",[t._v("插值表达式")]),t._v(" 和 "),s("strong",[t._v("属性绑定")]),t._v(" 可以应用过滤器")])])])},[],!1,null,null,null);a.default=r.exports}}]);